package main

import "os"
import "cx"
import "time"

func matchArg(arg str, pattern str, match *bool) (out bool) {
	out = false
	var argLen i32 = len(arg)
	var patternLen i32 = len(pattern)
	if (argLen >= patternLen) {
		name := str.substr(arg, 0, patternLen)
		if (name == pattern) {
			if *match {
				printf("duplicate arg %s\n", arg)
				os.Exit(cx.PANIC)
			}
			*match = true
			out = true
		}
	}
}

func getArgValueStr(arg str, pattern str, value *str, match *bool) (out bool) {
	if matchArg(arg, pattern, match) {
		var argLen i32 = len(arg)
		var patternLen i32 = len(pattern)
		if argLen > patternLen {
			*value = str.substr(arg, patternLen, argLen)
			out = true
		}
	}
}

func getArgValueStrSlice(arg str, pattern str, match *bool) (out []str) {
	var filterList str = ""
	var filterMatch bool = false
	var slice []str
	if getArgValueStr(arg, pattern, &filterList, &filterMatch) {
		var index i32 = 0
		for index >= 0 {
			index = str.index(filterList, ",")
			var filter str = filterList
			if index >= 0 {
				filter = str.substr(filterList, 0, index)
				filterList = str.substr(filterList, index + 1, len(filterList))
			} else {
				filterList = ""
			}
			filter = str.trimspace(filter)
			slice = append(slice, filter)
		}
	}
	out = slice
}

func getArgValueI32(arg str, pattern str, value *i32, match *bool) (out bool) {
	var strValue str = ""
	out = getArgValueStr(arg, pattern, &strValue, match)
	if out {
		var i32Value i32 = str.i32(strValue)
		*value = i32Value
	}
}

func getFlags(arg str, pattern str, flags *i32, match *bool, names []str, values[]i32) (success bool) {
	panic(len(names), len(values), "invalid flags")
	success = false
	var list str = ""
	var slice []str = getArgValueStrSlice(arg, pattern, match)
	for i := 0; i < len(slice); i++ {
		var value i32 = 0
		for k := 0; k < len(names); k++ {
			if slice[i] == names[k] {
				value = values[k]
			}
		}

		if value != 0 {
			*flags = *flags | value
			success = true
		} else {
			printf("invalid option value %s\n", arg)
			os.Exit(cx.PANIC)
		}
	}
}

func printFlags(name str, flags i32, names []str, values[]i32) {
	panic(len(names), len(values), "invalid flags")
	printf("%s : %d : ", name, flags)
	var count i32 = len(values)
	for i := 0; i < count && flags > 0; i++ {
		var flag i32 = values[i]
		if (flags & flag) == flag {
			printf("%s, ", names[i])
			flags = flags & (-1 ^ flag)
		}
	}
	printf("\n")
	panic(flags, 0, "invalid flags")
}

var TEST_NONE   i32 = 0
var TEST_STABLE i32 = 1
var TEST_ISSUE  i32 = 2
var TEST_GUI    i32 = 4
var TEST_ALL    i32 = 7//TEST_STABLE | TEST_ISSUE | TEST_GUI

var LOG_NONE	i32 = 0
var LOG_SUCCESS i32 = 1
var LOG_STDERR  i32 = 2
var LOG_FAIL    i32 = 4
var LOG_SKIP    i32 = 8
var LOG_TIME    i32 = 16
var LOG_ALL	    i32 = 31//LOG_SUCCESS | LOG_STDERR | LOG_FAIL | LOG_SKIP | LOG_TIME

var g_testCount i32 = 0
var g_testSuccess i32 = 0
var g_testSkipped i32 = 0

var g_enabledTests i32 = TEST_ALL
var g_log i32 = LOG_FAIL
var g_cxPath str = "cx"
var g_workingDir str = ""

func prettyOsCode(code i32) (out str) {
	if (code == os.RUN_SUCCESS) {
		out = "os.RUN_SUCCESS"
	} else if (code == os.RUN_EMPTY_CMD) {
		out = "os.RUN_EMPTY_CMD"
	} else if (code == os.RUN_PANIC) {
		out = "os.RUN_PANIC"
	} else if (code == os.RUN_START_FAILED) {
		out = "os.RUN_START_FAILED"
	} else if (code == os.RUN_WAIT_FAILED) {
		out = "os.RUN_WAIT_FAILED"
	} else if (code == os.RUN_TIMEOUT) {
		out = "os.RUN_TIMEOUT"
	} else {
		out = "unknown os.Run exit code"
	}
}

func runTestEx(cmd str, exitCode i32, desc str, filter i32, timeoutMs i32) () {
	if (g_enabledTests & filter) == filter {
		cmd = sprintf("%s %s", g_cxPath, cmd)
		var runError i32 = 0
		var cmdError i32 = 0
		var stdOut str

		var padding str
		if (g_testCount < 10) {
			padding = "  "
		} else if (g_testCount < 100) {
			padding = " "
		}
		var start i64 = time.UnixMilli()
		runError, cmdError, stdOut = os.Run(cmd, 2048, timeoutMs, g_workingDir)
		var end i64 = time.UnixMilli()
		var timing str
		timing = "na"
		if (g_log & LOG_TIME) == LOG_TIME {
			var deltaMs i32 = i64.i32(end - start)
			timing = sprintf("%dms", deltaMs)
		}

		if (runError != 0 && (runError != os.RUN_TIMEOUT || timeoutMs <= 0)) {
			if ((g_log & LOG_FAIL) == LOG_FAIL) {
				printf("#%s%d | FAILED  | %s | '%s' | os.Run exited with code %s (%d) | %s\n",
					padding, g_testCount, timing, cmd, prettyOsCode(runError), runError, desc)
			}
			if ((g_log & LOG_STDERR) == LOG_STDERR) {
				printf("%s\n", stdOut)
			}
		} else if (cmdError != exitCode) {
			if ((g_log & LOG_FAIL) == LOG_FAIL) {
				printf("#%s%d | FAILED  | %s | '%s' | expected %s (%d) | got %s (%d) | %s\n",
					padding, g_testCount, timing, cmd, strerror(exitCode), exitCode, strerror(cmdError), cmdError, desc)
			}
			if ((g_log & LOG_STDERR) == LOG_STDERR) {
				printf("%s\n", stdOut)
			}
		} else {
			if ((g_log & LOG_SUCCESS) == LOG_SUCCESS) {
				printf("#%s%d | success | %s | '%s' | expected %s (%d) | got %s (%d)\n",
					padding, g_testCount, timing, cmd, strerror(exitCode), exitCode, strerror(cmdError), cmdError)
			}
			g_testSuccess = g_testSuccess + 1
		}
		g_testCount = g_testCount + 1
	} else {
		if ((g_log & LOG_SKIP) == LOG_SKIP) {
			printf("#--- | Skipped | na | '%s' | na | na | %s\n", cmd, desc)
		}
		g_testSkipped = g_testSkipped + 1
	}
}

func runTest(cmd str, exitCode i32, desc str) {
	runTestEx(cmd, exitCode, desc, TEST_STABLE, 0)
}

func help () {
	printf("Options:\n")
	printf("++help          : Prints this message.\n")
	printf("++enable-tests  : Enable test set (all, stable, issue, gui).\n")
	printf("++disable-tests : Disable test set (all, stable, issue, gui).\n")
	printf("++log           : Enable log set (all, success, stderr, fail, skip, time).\n")
	printf("++cxpath        : Set cx directory\n")
	printf("++wdir          : Set working directory\n")
}

func main ()() {
	var testNames []str
	var testValues []i32
	testNames = []str { "all", "stable", "issue", "gui" }
	testValues = []i32 { TEST_ALL, TEST_STABLE, TEST_ISSUE, TEST_GUI }

	var logNames []str
	var logValues []i32
	logNames = []str { "all", "success", "stderr", "fail", "skip", "time" }
	logValues = []i32 { LOG_ALL, LOG_SUCCESS, LOG_STDERR, LOG_FAIL, LOG_SKIP, LOG_TIME }

	var argCount i32 = len(os.Args)

	var workingDirMatch bool = false
	var cxPathMatch bool = false
	var logMatch bool = false
	var enabledTestMatch bool = false
	var disabledTestMatch bool = false
	var helpMatch bool = false

	var enabledTests i32 = 0
	var disabledTests i32 = 0
	var log i32 = 0

	for a := 0; a < argCount; a++ {
		var arg str = os.Args[a]

		if getArgValueStr(arg, "++wdir=", &g_workingDir, &workingDirMatch) {
			continue
		}

		if getArgValueStr(arg, "++cxpath=", &g_cxPath, &cxPathMatch) {
			continue
		}

		if getFlags(arg, "++log=", &log, &logMatch, logNames, logValues) {
			continue
		}

		if getFlags(arg, "++enable-tests=", &enabledTests, &enabledTestMatch, testNames, testValues) {
			continue
		}

		if getFlags(arg, "++disable-tests=", &disabledTests, &disabledTestMatch, testNames, testValues) {
			continue
		}

		if matchArg(arg, "++help", &helpMatch) {
			help()
			os.Exit(0)
		}

		printf("invalid argument : %s\n", arg)
		os.Exit(cx.PANIC)
	}

	if enabledTests == TEST_ALL && disabledTests == TEST_ALL {
		printf("Invalid test combination :\n")
		printFlags("++enabled-test=", enabledTests, testNames, testValues)
		printFlags("++disabled-tests=", disabledTests, testNames, testValues)
		os.Exit(cx.PANIC)
	} else if disabledTests == TEST_ALL {
		g_enabledTests = enabledTests
	} else {
		g_enabledTests = (g_enabledTests | enabledTests) & (-1 ^ disabledTests)
	}

	if log > LOG_NONE {
		g_log = log
	}

	printf("\nRunning CX tests in dir : '%s'\n", g_workingDir)
	printFlags("Enabled tests", g_enabledTests, testNames, testValues)
	printFlags("Enabled log", g_log, logNames, logValues)
	printf("\n")

	var start i64
	start = time.UnixMilli()

	// tests
	runTest("test-i32.cx", cx.SUCCESS, "i32")
	runTest("test-i64.cx", cx.SUCCESS, "i64")
	runTest("test-f32.cx", cx.SUCCESS, "f32")
	runTest("test-f64.cx", cx.SUCCESS, "f64")
	runTest("test-bool.cx", cx.SUCCESS, "bool")
	runTest("test-array.cx", cx.SUCCESS, "array")
	runTest("test-function.cx", cx.SUCCESS, "function")
	runTest("test-control-flow.cx", cx.SUCCESS, "control floow")
	runTest("test-utils.cx test-struct.cx", cx.SUCCESS, "struct")
	runTest("test-str.cx", cx.SUCCESS, "str")
	runTest("test-utils.cx test-pointers.cx", cx.SUCCESS, "pointers")
	runTest("test-slices.cx", cx.SUCCESS, "slices")
	runTest("--cxpath test-workspace test-workspace-a.cx", cx.SUCCESS, "Testing if CX can set a workspace and then import a library, taking that workspace as the new relative path.")
	runTest("--cxpath test-workspace test-workspace-b.cx", cx.SUCCESS, "Testing if CX can set a workspace and then import a nested library, taking that workspace as the new relative path.")
	runTest("--cxpath test-workspace test-workspace-c.cx test-workspace-d.cx", cx.SUCCESS, "Testing if files supplied to the CLI override libraries in the workspace.")
	runTest("test-slices-index-out-of-range-a.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test index < 0")
	runTest("test-slices-index-out-of-range-b.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test index >= len")
	runTest("test-slices-resize-out-of-range-a.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test out of range after resize")
	runTest("test-slices-resize-out-of-range-b.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test resize with count < 0")
	runTest("test-slices-insert-out-of-range-a.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test insert with index > len")
	runTest("test-slices-insert-out-of-range-b.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test insert with index < 0")
	runTest("test-slices-remove-out-of-range-a.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test remove with index < 0")
	runTest("test-slices-remove-out-of-range-b.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test remove with index >= len")
	runTest("test-slices-remove-out-of-range-c.cx", cx.RUNTIME_SLICE_INDEX_OUT_OF_RANGE, "Test remove with index == 0 && len == 0")
	runTest("test-short-declarations.cx", cx.SUCCESS, "short declarations")
	runTest("test-parse.cx", cx.SUCCESS, "parse")
	runTest("test-collection-functions.cx", cx.SUCCESS, "collection functions")
	runTest("test-scopes.cx", cx.SUCCESS, "Error in scopes.")
	runTest("-heap-initial 0 test-gc.cx", cx.SUCCESS, "Stress-testing the garbage collector")

	// issues
	runTest("issue-14.cx", cx.COMPILATION_ERROR, "Type casting error not reported.")
	runTestEx("issue-15.cx", cx.COMPILATION_ERROR, "Panic if return value is not used.", TEST_GUI | TEST_STABLE, 0)
	runTest("issue-18.cx", cx.SUCCESS, "String not working across packages")
	runTest("issue-19a.cx issue-19.cx", cx.SUCCESS, "Order of files matters for structs")
	runTest("issue-19.cx issue-19a.cx", cx.SUCCESS, "Order of files matters for structs")
	runTestEx("issue-23.cx", cx.COMPILATION_ERROR, "Panic when calling gl.BindBuffer with only one argument.", TEST_GUI | TEST_STABLE, 0)
	runTestEx("issue-24.cx", cx.SUCCESS, "Panic when giving []f32 argument to gl.BufferData", TEST_GUI | TEST_STABLE, 0)
	runTest("issue-25.cx", cx.SUCCESS, "Struct field crushed")
	runTest("issue-26.cx", cx.SUCCESS, "Failed to modify value in an array")
	runTest("issue-27.cx", cx.SUCCESS, "Panic when trying to index (using a var) an array, member of a struct passed as a function argument")
	runTest("issue-28.cx", cx.SUCCESS, "Can't call method from package")
	runTest("issue-29.cx", cx.SUCCESS, "Can't call method if it has a parameter")
	runTest("issue-30.cx", cx.SUCCESS, "Panic when using arithmetic to index an array field of a struct")
	runTest("issue-32.cx", cx.SUCCESS, "Panic if return value is used in an expression")
	runTest("issue-33.cx", cx.SUCCESS, "Using a variable to store the return boolean value of a function doesnt work with an if statement")
	runTest("issue-35.cx", cx.SUCCESS, "Panic when accessing property of struct array passed in as argument to func")
	runTest("issue-37.cx", cx.SUCCESS, "Unexpected results when accessing arrays of structs in a struct")
	runTest("issue-39.cx", cx.SUCCESS, "Inline initializations and arrays")
	runTest("issue-40.cx", cx.SUCCESS, "Slice keeps growing though it's cleared inside the loop")
	runTest("issue-41.cx", cx.SUCCESS, "Scope not working in loops")
	runTest("issue-48.cx", cx.SUCCESS, "Interdependant Structs")
	runTest("issue-49.cx", cx.COMPILATION_ERROR, "Panic when trying to access an invalid field.")
	runTest("issue-50.cx", cx.COMPILATION_ERROR, "No compilation error when using an using an invalid identifier")
	runTest("issue-51a.cx issue-51.cx", cx.SUCCESS, "Silent name clash between packages")
	runTest("issue-51.cx issue-51a.cx", cx.SUCCESS, "Silent name clash between packages")
	runTest("issue-52.cx", cx.COMPILATION_ERROR, "Invalid implicit cast.")
	runTest("issue-53.cx", cx.COMPILATION_ERROR, "Panic when using +* in an expression")
	runTest("issue-54.cx", cx.COMPILATION_ERROR, "No compilation error when defining a struct with duplicate fields.")
	runTest("issue-55.cx", cx.SUCCESS, "Can't define struct with a single character identifier.")
	runTest("issue-56.cx", cx.SUCCESS, "Panic when variable used in if statement without parenthesis.")
	runTest("issue-57.cx", cx.SUCCESS, "Struct field stomped")
	runTest("issue-58.cx", cx.COMPILATION_ERROR, "No compilation error when indexing an array with a non integral var.")
	runTest("issue-59a.cx", cx.SUCCESS, "Panic when a field of a struct returned by a function is used in an expression")
	runTest("issue-59b.cx", cx.SUCCESS, "Panic when a field of a struct returned by a function is used in an expression")
	runTest("issue-60a.cx issue-60.cx", cx.COMPILATION_ERROR, "No compilation error when using var without package qualification.")
	runTest("issue-61.cx", cx.SUCCESS, "No compilation error when passing *i32 as an i32 arg and conversely")
	runTest("issue-61a.cx", cx.COMPILATION_ERROR, "No compilation error when passing *i32 as an i32 arg and conversely")
	runTest("issue-62.cx", cx.COMPILATION_ERROR, "No compilation error when dereferencing an i32 var.")
	runTest("issue-63.cx", cx.SUCCESS, "Wrong pointer behaviour.")
	runTest("issue-65.cx", cx.SUCCESS, "Return from a function doesnt work")
	runTest("issue-65b.cx", cx.COMPILATION_ERROR, "Mismatched number of returning arguments is not throwing an error")
	runTest("issue-67.cx", cx.COMPILATION_ERROR, "No compilation error when var is accessed outside of its declaring scope")
	runTest("issue-68.cx", cx.COMPILATION_ERROR, "Panic when a str var is shadowed by a struct var in another scope")
	runTestEx("issue-69.cx", cx.SUCCESS, "glfw.GetCursorPos() throws error", TEST_GUI | TEST_STABLE, 0)
	runTest("issue-70.cx", cx.SUCCESS, "Inline field and index 'dereferences' to function calls' outputs")
	runTest("issue-71.cx", cx.COMPILATION_ERROR, "No compilation error when redeclaring a variable")
	runTest("issue-72.cx", cx.SUCCESS, "Multi-dimensional slices don't work")
	runTest("issue-75.cx", cx.SUCCESS, "can't prefix a (f32) variable with minus to flip it's signedness")
	runTest("issue-76.cx", cx.COMPILATION_ERROR, "Using int literal 0 where 0.0 was needed gave no error")
	runTest("issue-77.cx", cx.SUCCESS, "error with sending references of structs to functions")
	runTest("issue-77b.cx", cx.SUCCESS, "error with references to struct literals")
	runTest("issue-78.cx", cx.COMPILATION_ERROR, "struct identifier (when initializing fields) can be with or without a '&' prefix, with no CX error")
	runTest("issue-79.cx", cx.COMPILATION_ERROR, "can assign to previously undeclared vars with just '='")
	runTest("issue-82.cx", cx.SUCCESS, "empty code blocks (even if they contain commented-out lines) crash like this")
	runTest("issue-84.cx", cx.SUCCESS, "increment operator ++ does not work")
	runTest("issue-85.cx", cx.SUCCESS, "Method does not work")
	runTest("issue-86.cx", cx.SUCCESS, "Cannot use bool variable in if expression")
	runTest("issue-88.cx", cx.SUCCESS, "CX Parser does not recognize method")
	runTest("issue-90.cx", cx.SUCCESS, "Goto not working on windows")
	runTest("issue-91.cx", cx.SUCCESS, "Methods with pointer receivers don't work")
	runTestEx("issue-93.cx", cx.SUCCESS, "when using 2 f32 out parameters, only the value of the 2nd gets through", TEST_GUI | TEST_STABLE, 0)
	runTest("issue-98.cx", cx.COMPILATION_ERROR, "Variable redeclaration should not be allowed")
	runTest("issue-99.cx", cx.SUCCESS, "Short variable declarations are not working with calls to methods or functions")
	runTest("issue-101.cx", cx.COMPILATION_ERROR, "Panic when using equality operator between a bool and an i32")
	runTest("issue-102.cx", cx.SUCCESS, "String concatenation using the + operator doesn't work")
	runTest("issue-103.cx", cx.SUCCESS, "Argument list is not parsed correctly")
	runTest("issue-104.cx", cx.SUCCESS, "Dubious error message when indexing an array with a substraction expression")
	runTest("issue-105.cx", cx.SUCCESS, "Dubious error message when inline initializing a slice")
	runTest("issue-106a.cx issue-106.cx", cx.SUCCESS, "Troubles when accessing a global var from another package")
	runTest("issue-108.cx", cx.SUCCESS, "same func names (but in different packages) collide")
	runTest("issue-111.cx", cx.COMPILATION_ERROR, "can use vars from other packages without a 'packageName.' prefix")
	runTest("issue-120.cx", cx.SUCCESS, "False positive when detecting variable redeclaration.")
	runTestEx("issue-120a.cx", cx.SUCCESS, "False positive when detecting variable redeclaration.", TEST_ISSUE, 0)
	runTestEx("issue-120b.cx", cx.SUCCESS, "False positive when detecting variable redeclaration.", TEST_ISSUE, 0)
	runTest("issue-131.cx", cx.SUCCESS, "Problem with struct literals in short variable declarations")
	runTest("issue-132.cx", cx.SUCCESS, "Panic when using the return value of a function in a short declaration")
	runTest("issue-133a.cx", cx.COMPILATION_ERROR, "Panic when inserting a new line in a string literal")
	runTest("issue-133b.cx", cx.SUCCESS, "Panic when inserting a new line in a string literal")
	runTest("issue-134.cx", cx.COMPILATION_ERROR, "Panic when declaring a variable of an unknown type")
	runTest("issue-135.cx", cx.COMPILATION_ERROR, "No compilation error when using arithmetic operators on struct instances")
	runTestEx("issue-141.cx", cx.SUCCESS, "Parser gets confused with `2 -2`", TEST_STABLE, 0)
	runTest("issue-153.cx", cx.SUCCESS, "Panic in when assigning an empty initializer list to a []i32 variable")
	runTest("issue-154.cx", cx.SUCCESS, "Cx stack overflow when appending to a slice passed by address")
	runTest("issue-155.cx", cx.COMPILATION_ERROR, "Panic when trying to assign return value of a function returning void")
	runTest("issue-156.cx", cx.COMPILATION_ERROR, "Panic when using a function declared in another package without importing the package")
	runTest("issue-157.cx", cx.SUCCESS, "Cx memory stomped")
	runTest("issue-158.cx", cx.SUCCESS, "Invalid offset calculation of non literal strings when appended to a slice")
	runTest("issue-166.cx", cx.COMPILATION_ERROR, "Panic when calling a function from another package where the package name alias a local variable name")
	runTest("issue-167.cx", cx.SUCCESS, "Garbage memory when passing the address of slice element to a function")
	runTest("issue-168.cx", cx.SUCCESS, "Type deduction of struct field fails")
	runTest("issue-169.cx", cx.COMPILATION_ERROR, "No compilation error when assigning a i32 value to a []i32 variable")
	runTest("issue-170.cx", cx.COMPILATION_ERROR, "No compilation error when comparing value of different types")
	runTest("-stack-size 30 issue-207a.cx", cx.RUNTIME_STACK_OVERFLOW_ERROR, "No stack overflow error")
	runTest("-heap-initial 100 -heap-max 110 issue-207b.cx", cx.RUNTIME_HEAP_EXHAUSTED_ERROR, "No heap exhausted error")
	runTest("issue-214.cx", cx.SUCCESS, "Argument type deduction failed when passing address of an i32 struct field to a function accepting *i32 argument.")
	runTest("issue-218.cx", cx.COMPILATION_ERROR, "Type checking is not working with receiving variables of unexpected types")
	runTest("issue-244.cx", cx.SUCCESS, "Crash when using a constant expression in a slice literal expression")
	runTest("issue-247-a.cx", cx.COMPILATION_ERROR, "Can redeclare variables if they are inline initialized")
	runTest("issue-247-b.cx", cx.COMPILATION_ERROR, "Can redeclare variables if they are inline initialized")
	runTest("issue-264.cx", cx.SUCCESS, "Trying to determine the length of a slice of struct instances throws an error.")
	runTestEx("issue-279.cx", cx.SUCCESS, "Wrong sprintf behaviour when passing increment expression as argument", TEST_ISSUE, 0)
	runTestEx("issue-280.cx", cx.COMPILATION_ERROR, "Panic when using void return value of a function in a for loop expression", TEST_ISSUE, 0)
	runTestEx("issue-281.cx", cx.SUCCESS, "Wrong sprintf behaviour when printing boolean values with %v", TEST_ISSUE, 0)
	runTestEx("issue-282.cx", cx.SUCCESS, "for true {} loop scope is not executed", TEST_ISSUE, 0)
	runTestEx("issue-283.cx", cx.SUCCESS, "for loop using boolean value is not compiling", TEST_ISSUE, 0)
	runTest("issue-284.cx", cx.SUCCESS, "Concatenation of str variables with + operator doesn't work")
	runTest("issue-285.cx", cx.SUCCESS, "Short declaration doesn't compile with opcode return value")
	runTest("issue-286.cx", cx.SUCCESS, "Compilation error when struct field is named 'input' or 'output'")
	runTestEx("issue-287.cx", cx.COMPILATION_ERROR, "No compilation error when using empty argument list after function call", TEST_ISSUE, 0)
	runTest("issue-288.cx", cx.COMPILATION_ERROR, "No compilation error when using float value in place of boolean expression")
	runTest("issue-289.cx", cx.COMPILATION_ERROR, "Panic when package contains duplicate function signature")
	runTestEx("issue-290.cx", cx.COMPILATION_ERROR, "Left hand side of , is not compiled", TEST_ISSUE, 0)
	runTestEx("issue-291-a.cx", cx.SUCCESS, "Compilation error when using return value of a member method in a expression", TEST_ISSUE, 0)
	runTestEx("issue-291-b.cx", cx.SUCCESS, "Compilation error when using return value of a member method in a expression", TEST_ISSUE, 0)
	runTest("issue-292.cx", cx.SUCCESS, "Compilation error when left hand side of an assignment expression is a struct field")
	runTestEx("issue-293.cx", cx.SUCCESS, "Crash when INIT_HEAP_SIZE limit is reached ", TEST_ISSUE, 0)
	runTestEx("issue-294-a.cx", cx.SUCCESS, "Crash in garbage collector when heap is resized", TEST_ISSUE, 0)
	runTestEx("issue-294-b.cx", cx.SUCCESS, "Crash in garbage collector when heap is resized", TEST_ISSUE, 0)
	runTestEx("issue-338-a.cx", cx.SUCCESS, "Issues with slice of type T where sizeof T is different than 4 ", TEST_ISSUE, 0)
	runTestEx("issue-338-b.cx", cx.SUCCESS, "Issues with slice of type T where sizeof T is different than 4 ", TEST_ISSUE, 0)
	runTestEx("issue-338-c.cx", cx.SUCCESS, "Issues with slice of type T where sizeof T is different than 4 ", TEST_ISSUE, 0)
	runTestEx("issue-358.cx", cx.COMPILATION_ERROR, "No compilation error when global variable is redeclared at local scope", TEST_ISSUE, 0)
	runTestEx("issue-359.cx", cx.SUCCESS, "Compilation error when using return value of a method call in an inline initialization", TEST_ISSUE, 0)
	runTestEx("issue-360.cx", cx.COMPILATION_ERROR, "Panic when package keyword is misspelled", TEST_ISSUE, 0)
	runTestEx("issue-361.cx", cx.COMPILATION_ERROR, "No compilation error when assigning an literal which overflow the receiving type", TEST_ISSUE, 0)
	runTestEx("issue-362.cx", cx.SUCCESS, "Cx is not supporting short-circuit evaluation", TEST_ISSUE, 0)
	runTestEx("issue-415.cx", cx.SUCCESS, "func defined with no arguments, called WITH arguments causes PANIC", TEST_ISSUE, 0)

	// We need to fix serialization and deserialization as user-callable functions
	// runTestEx("issue-309.cx", cx.SUCCESS, "Serialization is not taking into account non-default stack sizes.", TEST_ISSUE, 0)
	// runTestEx("issue-310.cx", cx.SUCCESS, "Splitting a serialized program into its blockchain and transaction parts.", TEST_ISSUE, 0)
	// runTestEx("issue-311.cx", cx.SUCCESS, "`CurrentFunction` and `CurrentStruct` are causing errors in programs with more than 1 package.", TEST_ISSUE, 0)
	// runTestEx("issue-312.cx", cx.SUCCESS, "Deserialization is not setting correctly the sizes for the CallStack, HeapStartsAt and StackSize fields of the CXProgram structure.", TEST_ISSUE, 0)

	var end i64
	end = time.UnixMilli()

	if (g_log & LOG_TIME) == LOG_TIME {
		printf("\nTests finished after %d milliseconds", i64.sub(end, start))
	}

	printf("\nA total of %d tests were performed\n", g_testCount)
	printf("%d were successful\n", g_testSuccess)
	printf("%d failed\n", g_testCount - g_testSuccess)
	printf("%d skipped\n", g_testSkipped)

	if g_testCount == 0 || (g_testSuccess != g_testCount) {
		os.Exit(cx.PANIC)
	}
}
